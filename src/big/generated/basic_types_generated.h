// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BASICTYPES_BIG_FBS_H_
#define FLATBUFFERS_GENERATED_BASICTYPES_BIG_FBS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace big {
namespace fbs {

struct Size2;

struct Size3;

struct Vector2D;

struct Vector3D;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Size2 FLATBUFFERS_FINAL_CLASS {
 private:
  uint64_t x_;
  uint64_t y_;

 public:
  Size2()
      : x_(0),
        y_(0) {
  }
  Size2(uint64_t _x, uint64_t _y)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)) {
  }
  uint64_t x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  uint64_t y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
};
FLATBUFFERS_STRUCT_END(Size2, 16);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Size3 FLATBUFFERS_FINAL_CLASS {
 private:
  uint64_t x_;
  uint64_t y_;
  uint64_t z_;

 public:
  Size3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Size3(uint64_t _x, uint64_t _y, uint64_t _z)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)) {
  }
  uint64_t x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  uint64_t y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  uint64_t z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Size3, 24);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Vector2D FLATBUFFERS_FINAL_CLASS {
 private:
  double x_;
  double y_;

 public:
  Vector2D()
      : x_(0),
        y_(0) {
  }
  Vector2D(double _x, double _y)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)) {
  }
  double x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  double y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
};
FLATBUFFERS_STRUCT_END(Vector2D, 16);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Vector3D FLATBUFFERS_FINAL_CLASS {
 private:
  double x_;
  double y_;
  double z_;

 public:
  Vector3D()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vector3D(double _x, double _y, double _z)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)) {
  }
  double x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  double y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  double z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vector3D, 24);

}  // namespace fbs
}  // namespace big

#endif  // FLATBUFFERS_GENERATED_BASICTYPES_BIG_FBS_H_
