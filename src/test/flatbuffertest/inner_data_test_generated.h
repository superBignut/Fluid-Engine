// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INNERDATATEST_BIG_FBS_H_
#define FLATBUFFERS_GENERATED_INNERDATATEST_BIG_FBS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

#include "basic_types_generated.h"

namespace big {
namespace fbs {

struct MyData;
struct MyDataBuilder;

struct MyData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MyDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_AGE = 6,
    VT_HEIGHTANDWEIGHT = 8,
    VT_USEDHAW = 10,
    VT_FIENDS = 12
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  double age() const {
    return GetField<double>(VT_AGE, 0.0);
  }
  const big::fbs::Vector2D *heightAndWeight() const {
    return GetStruct<const big::fbs::Vector2D *>(VT_HEIGHTANDWEIGHT);
  }
  const ::flatbuffers::Vector<const big::fbs::Vector2D *> *usedHAW() const {
    return GetPointer<const ::flatbuffers::Vector<const big::fbs::Vector2D *> *>(VT_USEDHAW);
  }
  const ::flatbuffers::Vector<int32_t> *fiends() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_FIENDS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<double>(verifier, VT_AGE, 8) &&
           VerifyField<big::fbs::Vector2D>(verifier, VT_HEIGHTANDWEIGHT, 8) &&
           VerifyOffset(verifier, VT_USEDHAW) &&
           verifier.VerifyVector(usedHAW()) &&
           VerifyOffset(verifier, VT_FIENDS) &&
           verifier.VerifyVector(fiends()) &&
           verifier.EndTable();
  }
};

struct MyDataBuilder {
  typedef MyData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(MyData::VT_NAME, name);
  }
  void add_age(double age) {
    fbb_.AddElement<double>(MyData::VT_AGE, age, 0.0);
  }
  void add_heightAndWeight(const big::fbs::Vector2D *heightAndWeight) {
    fbb_.AddStruct(MyData::VT_HEIGHTANDWEIGHT, heightAndWeight);
  }
  void add_usedHAW(::flatbuffers::Offset<::flatbuffers::Vector<const big::fbs::Vector2D *>> usedHAW) {
    fbb_.AddOffset(MyData::VT_USEDHAW, usedHAW);
  }
  void add_fiends(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> fiends) {
    fbb_.AddOffset(MyData::VT_FIENDS, fiends);
  }
  explicit MyDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MyData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MyData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MyData> CreateMyData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    double age = 0.0,
    const big::fbs::Vector2D *heightAndWeight = nullptr,
    ::flatbuffers::Offset<::flatbuffers::Vector<const big::fbs::Vector2D *>> usedHAW = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> fiends = 0) {
  MyDataBuilder builder_(_fbb);
  builder_.add_age(age);
  builder_.add_fiends(fiends);
  builder_.add_usedHAW(usedHAW);
  builder_.add_heightAndWeight(heightAndWeight);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MyData> CreateMyDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    double age = 0.0,
    const big::fbs::Vector2D *heightAndWeight = nullptr,
    const std::vector<big::fbs::Vector2D> *usedHAW = nullptr,
    const std::vector<int32_t> *fiends = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto usedHAW__ = usedHAW ? _fbb.CreateVectorOfStructs<big::fbs::Vector2D>(*usedHAW) : 0;
  auto fiends__ = fiends ? _fbb.CreateVector<int32_t>(*fiends) : 0;
  return big::fbs::CreateMyData(
      _fbb,
      name__,
      age,
      heightAndWeight,
      usedHAW__,
      fiends__);
}

inline const big::fbs::MyData *GetMyData(const void *buf) {
  return ::flatbuffers::GetRoot<big::fbs::MyData>(buf);
}

inline const big::fbs::MyData *GetSizePrefixedMyData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<big::fbs::MyData>(buf);
}

inline bool VerifyMyDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<big::fbs::MyData>(nullptr);
}

inline bool VerifySizePrefixedMyDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<big::fbs::MyData>(nullptr);
}

inline void FinishMyDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<big::fbs::MyData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMyDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<big::fbs::MyData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace fbs
}  // namespace big

#endif  // FLATBUFFERS_GENERATED_INNERDATATEST_BIG_FBS_H_
